#include <iostream>
#include <vector>
#include <cmath>

const double pi=4*std::atan(1);

template <typename FunType>
    std::pair<double, bool> RombergIntegration(FunType f, double a, double b,
        double eps = 1e-8, int nmax = 1000000, int nmin = 50)
{
    if(eps<0||nmin<0||nmax<0||nmin>nmax) throw std::domain_error("Bad parameter");
    //9p 17str.
    int N=2;
    double h=(b-a)/N;
    double s=(f(a)+f(b))/2;
    double Iold=s;
    std::vector<double>I;
    for(int i=1;N<=nmax;i++)
    {
        for(int j=1;j<=N/2;j++)
            s+=f(a+(2*j-1)*h);
        
        I.push_back(h*s);
        double p=4;
        for(int k=i-2;k>=0;k--)
        {
            I[k]=(p*I[k+1]-I[k])/(p-1);
            p*=4;
        }
        if(N>=nmin && fabs(I[0]-Iold)<=eps) return {I[0],true};
        Iold=I[0];
        h/=2;
        N*=2;
    }
    return {Iold,false};
}

template <typename FunType>
    std::pair<double, bool> TanhSinhIntegration(FunType f, double a, double b,
        double eps = 1e-8, int nmax = 1000000, int nmin = 20, double range = 3.5)
{
    if(eps<0||nmin<0||nmax<0||nmax<nmin||range<0) throw std::domain_error("Bad parameter");

    double N=2;
    double h=2*range/N;
    double s=0;
    double Iold=s;
    int p=1;
    if(b<a)
    {
        p*=-1;
        std::swap(a,b);
    }
    while (N<nmax)
    {
        for(int i=1;i<=N/2;i++)
        {
            double t=-range+(2*i-1)*h;
            double m=f((b+a)/2+((b-a)/2)*tanh(sinh(t)*pi/2));
            if(std::isfinite(m)) s+=(((b-a)*pi*cosh(t))/(4*cosh(sinh(t)*pi/2)*cosh(sinh(t)*pi/2)))*m;
        }
        double I=h*s;
        if(N>=nmin && fabs(I-Iold)<=eps) return {p*I,true};
        Iold=I;
        N*=2;
        h/=2;
    }
    return {p*Iold,false};
}

std::pair<double,bool>operator+(std::pair<double,bool>p1,std::pair<double,
bool>p2)
{
return {p1.first+p2.first,p1.second && p2.second};
}


template <typename FunType>
    std::pair<double, bool> AdaptiveIntegration(FunType f, double a, double b,
        double eps = 1e-10, int maxdepth = 30, int nmin = 1)
{
   if(eps<0||maxdepth<0||nmin<0) throw std::domain_error("Bad parameter");

   std::pair<double,bool>s{0,true};
   double h=(b-a)/nmin;
   for(int i=1;i<=nmin;i++)
   {
       s=s+AdaptiveAux(f,a,a+h,eps,f(a),f(a+h),f(a+h/2),maxdepth);
       a+=h;
   }
   return s;
}

template <typename FunType>
    std::pair<double, bool> AdaptiveAux(FunType f, double a, double b,
        double eps, double f1 , double f2, double f3, int maxdepth)
{
    if(!std::isfinite(f1)) f1=0;
    if(!std::isfinite(f2)) f2=0;
    if(!std::isfinite(f3)) f3=0;
    double c=(a+b)/2;
    double I1=(b-a)*(f1+4*f3+f2)/6;
    double f4=f((a+c)/2);
    double f5=f((c+b)/2);
    if(!std::isfinite(f4)) f4=0;
    if(!std::isfinite(f5)) f5=0;
    double I2=(b-a)*(f1+4*f4+2*f3+4*f5+f2)/12;
    if(fabs(I1-I2)<=eps) return {I2,true};
    if (maxdepth<=0) return {I2,false};
    return AdaptiveAux(f,a,c,eps,f1,f3,f4,maxdepth-1)+AdaptiveAux(f,c,b,eps,f3,f2,f5,maxdepth-1);
}

int main()
{
    auto f=[](double x){return std::sin(x);};
    auto romberg=RombergIntegration(f,0,pi);
    std::cout<<romberg.first<<" "<<romberg.second<<std::endl;
    auto tansi=TanhSinhIntegration(f,0,pi);
    std::cout<<tansi.first<<" "<<tansi.second<<std::endl;
    auto adapt1=AdaptiveIntegration(f,0,pi);
    std::cout<<adapt1.first<<" "<<adapt1.second<<std::endl;

    std::cout<<std::endl;

    auto f2=[](double x){return 1/sqrt(x);};
    auto tansi2=TanhSinhIntegration(f,0,1);
    std::cout<<tansi.first<<" "<<tansi.second<<std::endl;
    auto adapt2=AdaptiveIntegration(f,0,1);
    std::cout<<adapt2.first<<" "<<adapt2.second<<std::endl;

    std::cout<<std::endl;
    try
    {
        RombergIntegration([](double x){return x;},6,2,-2,4,1);
    }
    catch(std::domain_error e)
    {
        std::cout<<e.what()<<std::endl;
    }

    try
    {
        TanhSinhIntegration([](double x){return x;},0,0,0,-3,0);
    }
    catch(std::domain_error e)
    {
        std::cout<<e.what()<<std::endl;
    }

    try
    {
        AdaptiveIntegration([](double x){return x;},-20,2,1e-10,-1,4);
    }
    catch(std::domain_error e)
    {
        std::cout<<e.what()<<std::endl;
    }

    return 0;
}